vehilcleNS=(function(){var c=Object.freeze({OFF:0,ON:1});var a=Object.freeze({CLOCKWISE:0,COUNTER_CLOCKWISE:1});var b=Object.freeze({LAND:0,WATER:1});Function.prototype.inherit=function(d){this.prototype=new d();
this.prototype.constructor=this;};Function.prototype.extend=function(f){for(var e=1;e<arguments.length;e+=1){var d=arguments[e];this.prototype[d]=f.prototype[d];
}return this;};PropulsionUnit=function(){};PropulsionUnit.prototype.produceAcceleration=function(){throw new Error("Method not implemented by inherit class.");
};Wheel=function(d){var e=this;e.radius=d;PropulsionUnit.apply(e,arguments);};Wheel.inherit(PropulsionUnit);Wheel.prototype.produceAcceleration=function(){var d=2*Math.PI*this.radius;
return d;};PropelingNozzle=function(e,f){var d=this;d.power=e;d.afterburnerState=f;PropulsionUnit.apply(d,arguments);};PropelingNozzle.inherit(PropulsionUnit);
PropelingNozzle.prototype.produceAcceleration=function(){var d;if(this.afterburnerState===c.ON){d=this.power*2;}else{d=this.power;}return d;};Propeller=function(e,f){var d=this;
d.finsCount=e;d.spinDirection=f;PropulsionUnit.apply(d,arguments);};Propeller.inherit(PropulsionUnit);Propeller.prototype.produceAcceleration=function(){var d=0;
if(this.spinDirection===a.CLOCKWISE){d=this.finsCount;}else{d=-this.finsCount;}return d;};Vehicle=function(f,e){if(f<0){throw new Error("Invalid speed! Speed cannot be negative!");
}else{var d=this;d.speed=f;d.propulsionUnits=e;}};Vehicle.prototype.accelerate=function(){var d=0;if(this.propulsionUnits instanceof Array){for(var e in this.propulsionUnits){d+=this.propulsionUnits[e].produceAcceleration();
}}else{d=this.propulsionUnits.produceAcceleration();}this.speed=d;console.log("Now I have speed => "+this.speed);};LandVehicle=function(e,f){if(f.length!=4){throw new Error("Land vehicle should have four propulsion units!");
}for(var d in f){if(!(f[d] instanceof Wheel)){throw new Error("Land vehicle's propulsion units should be wheels!");}}Vehicle.apply(this,arguments);};LandVehicle.inherit(Vehicle);
AirVehicle=function(e,d){if(d.length instanceof Array){throw new Error("Air vehicle should have one propulsion unit!");}if(!(d instanceof PropelingNozzle)){throw new Error("Air vehicle's propulsion unit should be propeling nozzle!");
}Vehicle.apply(this,arguments);};AirVehicle.inherit(Vehicle);AirVehicle.prototype.switchAfterBurnersState=function(){if(this.propulsionUnits.afterburnerState===c.OFF){this.propulsionUnits.afterburnerState=c.ON;
}else{this.propulsionUnits.afterburnerState=c.OFF;}};WaterVehicle=function(e,d){for(var f in d){if(!(d[f] instanceof Propeller)){throw new Error("Water vehicle's propulsion unit should be propellers!");
}}Vehicle.apply(this,arguments);};WaterVehicle.inherit(Vehicle);WaterVehicle.prototype.changePropellerSpinDirection=function(){for(var d in propellers){if((this.propulsionUnits[d].spinDirection===a.CLOCKWISE)){this.propulsionUnits[d].spinDirection=a.ANTI_CLOCKWISE;
}else{this.propulsionUnits[d].spinDirection=a.CLOCKWISE;}}};AmphibiousVehicle=function(f,i,d,e){propulsionUnits=[];for(var h in i){propulsionUnits.push(i[h]);
}for(var g in d){propulsionUnits.push(d[g]);}Vehicle.call(this,f,propulsionUnit);this.amphibiousMode=e;};AmphibiousVehicle.inherit(Vehicle);AmphibiousVehicle.extend(WaterVehicle,"changePropellerSpinDirection");
AmphibiousVehicle.prototype.accelerate=function(){var d;if(this.amphibiousMode===b.LAND){for(d in propulsionUnits){if(this.propulsionUnits[d] instanceof Wheel){this.speed+=this.propulsionUnits[d].produceAcceleration();
}}}else{for(d in propulsionUnits){if(this.propulsionUnits[d] instanceof Propeller){this.speed+=this.propulsionUnits[d].produceAcceleration();}}}};AmphibiousVehicle.prototype.switchMode=function(){if(this.amphibiousMode===b.LAND){this.amphibiousMode=b.WATER;
}else{this.amphibiousMode=b.LAND;}};return{AfterburnerState:c,SpinDirection:a,AmphibiousMode:b,Wheel:Wheel,PropelingNozzle:PropelingNozzle,Propeller:Propeller,LandVehicle:LandVehicle,AirVehicle:AirVehicle,WaterVehicle:WaterVehicle,AmphibiousVehicle:AmphibiousVehicle};
}());